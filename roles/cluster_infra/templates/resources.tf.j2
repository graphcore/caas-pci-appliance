# Modified by Graphcore Ltd.

#####
##### The identity scope we are operating in
##### Used to add tge OpenStack user name to instance metadata
#####
data "openstack_identity_auth_scope_v3" "scope" {
  name = "{{ cluster_name }}"
}

#####
##### Security groups
#####

# Security group to hold rules for the node
resource "openstack_networking_secgroup_v2" "cluster_secgroup" {
  name                 = "{{ cluster_name }}-{{ cluster_type }}"
  delete_default_rules = true   # Fully manage with terraform
}

# Allow all egress
resource "openstack_networking_secgroup_rule_v2" "cluster_egress_v4" {
  direction         = "egress"
  ethertype         = "IPv4"
  security_group_id = "${openstack_networking_secgroup_v2.cluster_secgroup.id}"
}

# Allow ingress for SSH
resource "openstack_networking_secgroup_rule_v2" "cluster_ingress_ssh_v4" {
  direction         = "ingress"
  ethertype         = "IPv4"
  protocol          = "tcp"
  port_range_min    = 22
  port_range_max    = 22
  security_group_id = "${openstack_networking_secgroup_v2.cluster_secgroup.id}"
}

#####
##### Cluster volumes
#####

resource "openstack_blockstorage_volume_v3" "zenith_volume" {
  name = "{{ cluster_name }}-{{ cluster_type }}-zenith"
  size = 1
}

resource "openstack_blockstorage_volume_v3" "data_volume" {
  name = "{{ cluster_name }}-{{ cluster_type }}-data"
  size = "{{ cluster_volume_size }}"
}

#####
##### Cluster networks
#####

##
# This block brings up a Ctrl network interface
#
data "openstack_networking_network_v2" "ctrlnet" {
  tags = [ "ctrl", "{{ control_network_name | default('azimuth-vpod-common-ctrl') }}" ]
}

data "openstack_networking_subnet_v2" "ctrlsub" {
  tags = [ "ctrl", "{{ control_network_name | default('azimuth-vpod-common-ctrl') }}" ]
}

resource "openstack_networking_port_v2" "ctrl" {
  name      = "{{ cluster_name }}-{{ cluster_type }}-ctrl"
  network_id     = data.openstack_networking_network_v2.ctrlnet.id
  admin_state_up = "true"
  fixed_ip {
    subnet_id = data.openstack_networking_subnet_v2.ctrlsub.id
  }
  port_security_enabled = "true"
  security_group_ids = [ openstack_networking_secgroup_v2.cluster_secgroup.id ]
}

##
# This block brings up the common storage network interface
#
{% if storage_network_name is defined %}
data "openstack_networking_network_v2" "stornet" {
  tags = [ "storage", "azimuth-vpod-common-storage" ]
}

data "openstack_networking_subnet_v2" "storsub" {
  tags = [ "storage", "azimuth-vpod-common-storage" ]
}

resource "openstack_networking_port_v2" "stor" {
  name      = "{{ cluster_name }}-{{ cluster_type }}-stor"
  network_id     = data.openstack_networking_network_v2.stornet.id
  admin_state_up = "true"
  fixed_ip {
    subnet_id = data.openstack_networking_subnet_v2.storsub.id
  }
  port_security_enabled = "false"
}
{% endif %}

##
# This block brings up the svc-storage network interface
#
{% if svc_storage_network_name is defined %}
data "openstack_networking_network_v2" "svc-stornet" {
  tags = [ "{{ svc_storage_network_name | default('svc-storage') }}" ]
}

data "openstack_networking_subnet_v2" "svc-storsub" {
  #tags = [ "storage", "{{ svc_storage_network_name | default('svc-storage') }}" ]
  tags = [ "{{ svc_storage_network_name | default('svc-storage') }}" ]
}

resource "openstack_networking_port_v2" "svc-stor" {
  name      = "{{ cluster_name }}-{{ cluster_type }}-svc-stor"
  network_id     = data.openstack_networking_network_v2.svc-stornet.id
  admin_state_up = "true"
  fixed_ip {
    subnet_id = data.openstack_networking_subnet_v2.svc-storsub.id
  }
  port_security_enabled = "false"
}
{% endif %}

##
# This block allocates a public floating IP to the appliance
#
{% if cluster_floating_ip_address is defined and cluster_floating_ip_address %}
resource "openstack_networking_floatingip_associate_v2" "app-fip" {
  floating_ip = "{{ cluster_floating_ip_address }}"
  port_id = "${openstack_networking_port_v2.ctrl.id}"
}
{% endif %}


#####
##### Cluster nodes
#####

##
# Select image based on name and tag
data "openstack_images_image_v2" "image" {
  name = "{{ image_name }}"
  tag =  "{{ image_tag }}"
}

resource "openstack_compute_instance_v2" "cluster_server" {
  name      = "{{ cluster_name }}"

  flavor_id = "{{ cluster_flavor }}"

  user_data = <<-EOF
    #cloud-config
    write_files:
      - path: /etc/systemd/network/05-ctrl.network
        content: |
          [Match]
          MACAddress=${openstack_networking_port_v2.ctrl.mac_address}
          [Network]
          DHCP=yes
          [DHCPv4]
          UseDNS=yes
{% if storage_network_name is defined %}
      - path: /etc/systemd/network/07-stor.network
        content: |
          [Match]
          MACAddress=${openstack_networking_port_v2.stor.mac_address}
          [Network]
          DHCP=yes
          [DHCPv4]
          UseDNS=false
{% endif %}
{% if svc_storage_network_name is defined %}
      - path: /etc/systemd/network/09-svc-stor.network
        content: |
          [Match]
          MACAddress=${openstack_networking_port_v2.svc-stor.mac_address}
          [Network]
          DHCP=yes
          [DHCPv4]
          UseDNS=false
{% endif %}
{% if cephfs_secrets is defined and cephfs_secrets %}
{% for key, value in cephfs_secrets.items() %}
      - path: /etc/ceph/{{key}}.secret
        owner: root:root
        permissions: "0600"
        content: |
           {{value}}
{% endfor %}
{% endif %}
    mounts:
      - [ ephemeral0, /localdata, auto, "defaults,nofail" ]
{% if cloud_init_mounts is defined and cloud_init_mounts %}
{% for key, value in cloud_init_mounts.items() %}
      - [ {{value|replace('PLACEHOLDER', appliance_user)}} ]
{% endfor %}
{% endif %}
{% if custom_playbook.status is defined and custom_playbook.status|int == 200 and 'sign_in' not in custom_playbook.url %}
    ansible:
      install_method: pip
      package_name: ansible
      run_user: ipuuser
      pull:
        url: "https://gitlab-ee.it.graphcore.ai/{{appliance_user}}/custom-cloud.git"
        playbook_name: "{{gc_cloud}}.yml"
{% endif %}
    runcmd:
      - [ sed, -i, -e, '/^ipupod.*$/s/$/,{{appliance_user}}/', /etc/group ]
      - [ systemctl, daemon-reload ]
      - [ systemctl, restart, remote-fs.target ]
      - [ systemctl, restart, systemd-networkd ]
  EOF

  metadata = {
    zenith_volume_id = "${openstack_blockstorage_volume_v3.zenith_volume.id}"
    data_volume_id = "${openstack_blockstorage_volume_v3.data_volume.id}"
    zenith_registrar_url = "{{ zenith_registrar_url }}"
    zenith_registrar_token_webconsole = "{{ zenith_token_webconsole }}"
    zenith_registrar_token_monitoring = "{{ zenith_token_monitoring }}"
    zenith_fqdn_webconsole = "{{ zenith_fqdn_webconsole }}"
    zenith_fqdn_monitoring = "{{ zenith_fqdn_monitoring }}"
    zenith_sshd_host = "{{ zenith_sshd_host }}"
    zenith_sshd_port = "{{ zenith_sshd_port }}"
    azimuth_cloud_name = "notused"
    azimuth_user_name = "{{appliance_user}}"
    azimuth_user_id = "${data.openstack_identity_auth_scope_v3.scope.user_id}"
    azimuth_project_name = "${data.openstack_identity_auth_scope_v3.scope.project_name}"
    azimuth_project_id = "${data.openstack_identity_auth_scope_v3.scope.project_id}"
    guacamole_user = "ipuuser"
    appliance_type = "pci"
    appliance_pub_ip = "{{cluster_floating_ip_address | default('none')}}"
    appliance_ctrl_ip = "${openstack_networking_port_v2.ctrl.all_fixed_ips[0]}"
    appliance_lifetime_hrs = "{{ appliance_lifetime_hrs is defined | ternary(appliance_lifetime_hrs, 'none') }}"
    appliance_termination_epoch = "{{ appliance_deletion_epoch }}"
    appliance_version = "{{ gc_azapp_version | default ('none') }}"
  }

  block_device {
{% if cluster_previous_image is defined %}
    uuid  = "{{ cluster_previous_image }}"
{% else %}
    uuid  = "${data.openstack_images_image_v2.image.id}"
{% endif %}
    source_type           = "image"
    volume_size           = 100
    boot_index            = 0
    destination_type      = "volume"
    delete_on_termination = true
  }

  network {
    port = "${openstack_networking_port_v2.ctrl.id}"
  }

{% if storage_network_name is defined %}
  network {
    port = "${openstack_networking_port_v2.stor.id}"
  }
{% endif %}

{% if svc_storage_network_name is defined %}
  network {
    port = "${openstack_networking_port_v2.svc-stor.id}"
  }
{% endif %}
}

resource "openstack_compute_volume_attach_v2" "zenith_volume" {
  instance_id = "${openstack_compute_instance_v2.cluster_server.id}"
  volume_id   = "${openstack_blockstorage_volume_v3.zenith_volume.id}"
}

resource "openstack_compute_volume_attach_v2" "data_volume" {
  instance_id = "${openstack_compute_instance_v2.cluster_server.id}"
  volume_id   = "${openstack_blockstorage_volume_v3.data_volume.id}"
}
