# Modified by Graphcore Ltd.
# Convert the floating IP id to an address for Terraform
- name: Find out floating IP
  when:
    - cluster_floating_ip is defined
    - cluster_floating_ip
  block:
    - name: Look up floating ip
      stackhpc.terraform.os_floating_ip_info:
        floating_ip: "{{ cluster_floating_ip }}"
      register: cluster_floating_ip_info

    - name: Set floating IP address fact
      ansible.builtin.set_fact:
        cluster_floating_ip_address: "{{ cluster_floating_ip_info.floating_ip.floating_ip_address }}"
        #END block

- name: Make Terraform project directory
  ansible.builtin.file:
    path: "{{ terraform_project_path }}"
    state: directory

- name: Write backend configuration
  ansible.builtin.copy:
    content: |
      terraform {
        backend "{{ terraform_backend_type }}" { }
      }
    dest: "{{ terraform_project_path }}/backend.tf"

# Patching in this appliance is implemented as a switch to a new base image
# So unless explicitly patching, we want to use the same image as last time
# To do this, we query the previous Terraform state before updating
- name: Get cluster image from state
  when:
    - terraform_state == "present" or terraform_state == "update"
    - cluster_upgrade_system_packages is not defined or not cluster_upgrade_system_packages
  block:
    - name: Get previous Terraform state
      stackhpc.terraform.terraform_output:
        binary_path: "{{ terraform_binary_path }}"
        project_path: "{{ terraform_project_path }}"
        backend_config: "{{ terraform_backend_config }}"
      register: cluster_infra_terraform_output

    - name: Extract image from Terraform state
      ansible.builtin.set_fact:
        cluster_previous_image: "{{ cluster_infra_terraform_output.outputs.cluster_image.value }}"
      when: '"cluster_image" in cluster_infra_terraform_output.outputs'
      #END block

- name: Template Terraform files into project directory
  ansible.builtin.template:
    src: "{{ cluster_tf_var }}.j2"
    dest: "{{ terraform_project_path }}/{{ cluster_tf_var }}"
  loop:
    - outputs.tf
    - providers.tf
    - resources.tf
  loop_control:
    loop_var: cluster_tf_var

- name: Slurp the resources file as templated
  ansible.builtin.slurp:
    src: "{{ terraform_project_path }}/resources.tf"
  register: resources_b64

- name: Decode slurped file
  ansible.builtin.set_fact:
    resources_ascii: "{{ resources_b64['content'] | b64decode }}"

- name: Print resources
  ansible.builtin.debug:
    var: resources_ascii

- name: Provision infrastructure
  community.general.terraform:
    binary_path: "{{ terraform_binary_path }}"
    project_path: "{{ terraform_project_path }}"
    state: "{{ (terraform_state == 'update') | ternary('present', terraform_state) }}"
    backend_config: "{{ terraform_backend_config }}"
    force_init: yes
    init_reconfigure: yes
  register: terraform_provision
  when: (terraform_state == 'present') or (terraform_state == 'update') or (terraform_state == 'absent' and "cluster_name in vm_query.stdout")

- name: Populate facts from Terraform outputs
  ansible.builtin.set_fact:
    cluster_user: "{{ terraform_provision.outputs.cluster_user.value }}"
    cluster_flavour_name: "{{ terraform_provision.outputs.cluster_flavour_name.value }}"
    cluster_ctrl_ip: "{{ terraform_provision.outputs.appliance_ctrl_ip.value }}"
  when:
    - (terraform_state == "present") or (terraform_state == "update")
