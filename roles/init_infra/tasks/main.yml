- name: Define the terraform state
  ansible.builtin.set_fact:
    terraform_state: "{{ cluster_state | default('present') }}"

- name: Log appliance name
  ansible.builtin.debug:
    msg: "{{(terraform_state == 'present') | ternary ('Building','Destroying')}} {{cluster_type}} {{cluster_name}} of flavour {{cluster_flavor}} & ID {{cluster_id}}"

- name: Get openstack user name
  ansible.builtin.shell:
    cmd: openstack user show "$(openstack token issue -f value -c user_id)" -f value -c name
  register: openstack_cli_user

- name: Set user name
  ansible.builtin.set_fact:
    appliance_user: "{{ (openstack_cli_user.stdout | split('@') | first) if '@' in openstack_cli_user.stdout else openstack_cli_user.stdout }}"

- name: Get user's openstack project ID
  ansible.builtin.shell:
    cmd: openstack token issue -f value -c project_id
  register: openstack_cli_proj

- name: Set user project ID fact
  ansible.builtin.set_fact:
    appliance_project: "{{ openstack_cli_proj.stdout | default( 'ipuops') }}"

- name: Get tenancy name
  ansible.builtin.shell:
    cmd: openstack project show "$(openstack token issue -f value -c project_id)" -f value -c name
  register: openstack_cli_tenancy_name

- name: Set user tenancy name fact
  ansible.builtin.set_fact:
    appliance_tenancy: "{{ openstack_cli_tenancy_name.stdout | default( 'ipuops') }}"


- name: Include the vars we need
  ansible.builtin.include_vars:
    file: "{{ var_inc_var }}"
  loop:
    - "{{playbook_dir}}/group_vars/{{gc_cloud}}.yaml"
  loop_control:
    loop_var: var_inc_var

# - name: Try accessing AWX
#   ansible.builtin.uri:
#     url: "http://172.19.18.67:8052"
#     return_content: true
#   register: uri_out

# - ansible.builtin.debug:
#     msg: "{{ uri_out }}"

# - name: try to access AWX
#   local_action:
#     module: awx.awx.export
#     inventory: "{{appliance_tenancy}}-{{cluster_name}}"
#     controller_host: "http://172.19.18.67:8052"
#     controller_oauthtoken: "{{ controller_oauthtoken }}"
#     controller_username: "{{ controller_username }}"
#     validate_certs: no

- name: Application credential
  when: not terraform_state is search("absent")
  block:
    #TODO: add expiry time
    #TODO: consider making AppCred name more unique (OpenStack complains)
    - name: Test getting user AppCred
      ansible.builtin.shell:
        cmd: openstack application credential create -f yaml {{ cluster_name }}_{{ cluster_id }}
      register: user_appcred_req

    - name: Debug stdout
      ansible.builtin.debug:
        msg: "{{ user_appcred_req.stdout }}"

    - name: Convert AppCred to YAML
      ansible.builtin.set_fact:
        user_appcred: "{{ user_appcred_req | from_yaml }}"

    - name: Debug yaml
      ansible.builtin.debug:
        msg: "{{ user_appcred }}"


    #TODO: Add auth_url to parameters
    - name: Create AWX credential
      local_action:
        module: awx.awx.credential
        name: "{{ cluster_name }}_{{ cluster_id }}"
        description: AppCred for {{ appliance_user }}
        state: present
        user: admin
        credential_type: OpenStack AppCred
        inputs:
          auth_url: "https://gbnwp-cl1.ipu.graphcore.ai:5000"
          application_credential_id: "{{ user_appcred.id }}"
          application_credential_secret: "{{ user_appcred.secret }}"
