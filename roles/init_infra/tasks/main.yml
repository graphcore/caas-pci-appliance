- name: Define the terraform state
  ansible.builtin.set_fact:
    terraform_state: "{{ cluster_state | default('present') }}"

- name: Debug key variable
  ansible.builtin.debug:
    msg: "{{ cluster_ssh_private_key_file }}"

- name: Get openstack user name
  ansible.builtin.shell:
    cmd: openstack user show "$(openstack token issue -f value -c user_id)" -f value
      -c name
  register: openstack_cli_user

- name: Get user's openstack project ID
  ansible.builtin.shell:
    cmd: openstack token issue -f value -c project_id
  register: openstack_cli_proj

- name: Get tenancy name
  ansible.builtin.shell:
    cmd: openstack project show "$(openstack token issue -f value -c project_id)"
      -f value -c name
  register: openstack_cli_tenancy_name

- name: Include the vars we need
  ansible.builtin.include_vars:
    file: "{{ var_inc_var }}"
  loop:
    - "{{playbook_dir}}/group_vars/{{gc_tenancy | default(gc_cloud)}}.yaml"
  loop_control:
    loop_var: var_inc_var

- name: sanitise the cluster_id
  ansible.builtin.set_fact:
    cluster_id_safe: "{{ cluster_id | replace('-','') | int(base=16) }}"

- name: Handle appliance_flavour
  ansible.builtin.set_fact:
    cluster_flavor: "{{ openstack_uuid[appliance_flavour | split('.') | first ] }}"
  when:
    - appliance_flavour is defined and appliance_flavour

- name: Log appliance name
  ansible.builtin.debug:
    msg: "{{(terraform_state == 'present') | ternary ('Building','Destroying')}} {{cluster_type}}
      {{cluster_name}} of flavour {{cluster_flavor}} & ID {{cluster_id}} &lifetime
      {{appliance_lifetime_hrs is defined | ternary(appliance_lifetime_hrs, 'none')}}"

- name: Search ldap because some users don't have user id the same as their emails
  community.general.ldap_search:
    server_uri: ldap://gbnwpvldapslave001.it.graphcore.ai,ldap://gbnwpvldapslave002.it.graphcore.ai,ldap://gbbrsvldapslave001.it.graphcore.ai,ldap://gbbrsvldapslave002.it.graphcore.ai
    bind_dn: uid=svcsysops-ldapbind,ou=People,dc=bris,dc=graphcore,dc=ai
    dn: dc=bris,dc=graphcore,dc=ai
    bind_pw: "{{ ldap_auth_token }}"
    attrs:
      - uid
    scope: subordinate
    filter: "mail={{openstack_cli_user.stdout}}"
  register: ldap_uid_out
  #  delegate_to: localhost

- name: Set various facts
  ansible.builtin.set_fact:
    appliance_user: "{{ ldap_uid_out.results[0].uid | lower }}"
    appliance_project: "{{ openstack_cli_proj.stdout | default( 'ipuops') }}"
    appliance_tenancy: "{{ openstack_cli_tenancy_name.stdout | default( 'ipuops')
      }}"
    appcred_name: "{{ cluster_name }}_{{ cluster_id }}"

# TODO: get CRD to inject its calcuated delete time
- name: Calculate deletion time from now + lifetime
  ansible.builtin.shell:
    cmd: date -d '{{ appliance_lifetime_hrs | int * 60 }} mins' +'%F %T' -u
  register: appliance_deletion_result
  when:
    - appliance_deletion_epoch is not defined
    - appliance_lifetime_hrs is defined
    - not appliance_lifetime_hrs is search("never")

- name: Set time facts during creation
  ansible.builtin.set_fact:
    appliance_deletion_epoch: "{{ appliance_deletion_result.stdout is defined | ternary(appliance_deletion_result.stdout,
      'never') }}"

- name: Import tasks for awx, when required
  ansible.builtin.import_tasks: awx.yml
  when: awx_skip is not defined
