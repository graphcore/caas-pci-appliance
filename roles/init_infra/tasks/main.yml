- name: Define the terraform state
  ansible.builtin.set_fact:
    terraform_state: "{{ cluster_state | default('present') }}"

- name: Log appliance name
  ansible.builtin.debug:
    msg: "{{(terraform_state == 'present') | ternary ('Building','Destroying')}} {{cluster_type}} {{cluster_name}} of flavour {{cluster_flavor}} & ID {{cluster_id}}"

- name: Get openstack user name
  ansible.builtin.shell:
    cmd: openstack user show "$(openstack token issue -f value -c user_id)" -f value -c name
  register: openstack_cli_user

- name: Set user name
  ansible.builtin.set_fact:
    appliance_user: "{{ (openstack_cli_user.stdout | split('@') | first) if '@' in openstack_cli_user.stdout else openstack_cli_user.stdout }}"

- name: Get user's openstack project ID
  ansible.builtin.shell:
    cmd: openstack token issue -f value -c project_id
  register: openstack_cli_proj

- name: Set user project ID fact
  ansible.builtin.set_fact:
    appliance_project: "{{ openstack_cli_proj.stdout | default( 'ipuops') }}"

- name: Get tenancy name
  ansible.builtin.shell:
    cmd: openstack project show "$(openstack token issue -f value -c project_id)" -f value -c name
  register: openstack_cli_tenancy_name

- name: Set user tenancy name fact
  ansible.builtin.set_fact:
    appliance_tenancy: "{{ openstack_cli_tenancy_name.stdout | default( 'ipuops') }}"

- name: Include the vars we need
  ansible.builtin.include_vars:
    file: "{{ var_inc_var }}"
  loop:
    - "{{playbook_dir}}/group_vars/{{gc_cloud}}.yaml"
  loop_control:
    loop_var: var_inc_var

- name: Application credential
  when: not terraform_state is search("absent")
  block:
    - name: Calculate expiration time from now + lifetime + 1 hr
      ansible.builtin.shell:
        cmd: date -d '{{ (appliance_lifetime_hrs | int + 1) * 60 }} mins' +'%FT%T' -u
      register: appcred_expiry_epoch

    #TODO: consider making AppCred name more unique (OpenStack complains)
    - name: Test getting user AppCred
      ansible.builtin.shell:
        cmd: openstack application credential create -f yaml --expiration {{appcred_expiry_epoch.stdout}} {{ cluster_name }}_{{ cluster_id }}
      register: user_appcred_req

    - name: Debug stdout
      ansible.builtin.debug:
        msg: "{{ user_appcred_req.stdout }}"

    - name: Convert AppCred to YAML
      ansible.builtin.set_fact:
        user_appcred: "{{ user_appcred_req.stdout | from_yaml }}"

    - name: Debug yaml
      ansible.builtin.debug:
        msg: "{{ user_appcred }}"

    - name: Create AWX credential
      local_action:
        module: awx.awx.credential
        name: "{{ cluster_name }}_{{ cluster_id }}"
        description: AppCred for {{ appliance_user }}
        state: present
        user: admin
        credential_type: OpenStack AppCred
        inputs:
          auth_url: "{{ auth_url }}"
          application_credential_id: "{{ user_appcred.id }}"
          application_credential_secret: "{{ user_appcred.secret }}"
        controller_host: "http://172.19.18.67:8052"
        controller_oauthtoken: "{{ controller_oauthtoken }}"
        controller_username: "{{ controller_username }}"
        validate_certs: no

- name: Schedule appliance deletion
  when: not terraform_state is search("absent")
  block:
    - name: Calculate deletion time from now + lifetime
      ansible.builtin.shell:
        cmd: date -d '{{ appliance_lifetime_hrs | int * 60 }} mins' +'%F %T' -u
      register: appliance_deletion_epoch

    - name: Set fact with rrule for the schedule
      ansible.builtin.set_fact:
        schedule_rrule: "{{ query('awx.awx.schedule_rrule', 'none', start_date='' + appliance_deletion_epoch.stdout + '', timezone='UTC') }}"

    - name: Schedule appliance deletion
      local_action:
        module: awx.awx.schedule
        name: "Deletion task for {{ cluster_name }}"
        description: "Schedule created by Ansible"
        state: present
        inventory: "{{ appliance_tenancy }}-{{ cluster_name }}"
        unified_job_template: compute-appliance
        credentials:
          - "{{ cluster_name }}_{{ cluster_id }}"
        extra_data:
          cluster_state: absent
        rrule: "{{ schedule_rrule }}"
        enabled: true
        controller_host: "http://172.19.18.67:8052"
        controller_oauthtoken: "{{ controller_oauthtoken }}"
        controller_username: "{{ controller_username }}"
        validate_certs: no
