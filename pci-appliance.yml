# Modified and renamed by Graphcore Ltd.

- name: Create, update or destroy appliance
  hosts: openstack
  vars:
    image_name: "{{ pci_appliance_images | selectattr('name', 'equalto', operating_system) | map(attribute='image_name') | first }}"
    image_tag: "{{ ((openstack_image_tag == None) | ternary(default_image_tag, openstack_image_tag)) if openstack_image_tag is defined else default_image_tag }}"
  tasks:
    - name: Test if appliance VM exists
      ansible.builtin.shell:
        cmd: openstack server list --name {{cluster_name}}
      register: vm_query

    - name: Define the terraform state
      ansible.builtin.set_fact:
        terraform_state: "{{ cluster_state | default('update' if cluster_name in vm_query.stdout else 'present') }}"

    - name: Debug terraform_state
      ansible.builtin.debug:
        var: terraform_state

    - name: Include the roles needed
      ansible.builtin.include_role:
        name: "{{ item }}"
      loop:
        - "init_infra"
        - "{{ (terraform_state == 'present') | ternary('rbac_infra','') }}"
        - "cluster_infra"

# Write the outputs as the final task
- hosts: localhost
  tasks:
    - debug: var=outputs
      vars:
        outputs:
          cluster_access_ip: "{{ cluster_floating_ip_address | default('') }}"
          cluster_ctrl_ip: "{{ cluster_ctrl_ip | default('') }}"
          cluster_user: "{{ hostvars[groups['openstack'][0]].appliance_user }}"
          cluster_flavour_name: "{{ hostvars[groups['openstack'][0]].cluster_flavour_name }}"
          cluster_operating_system: "{{ hostvars[groups['openstack'][0]].operating_system }}"
          cluster_version: "{{ hostvars[groups['openstack'][0]].gc_azapp_version }}"
          cluster_lifetime: "{{ hostvars[groups['openstack'][0]].appliance_lifetime_hrs }}"
          cluster_termination_epoch: "{{ hostvars[groups['openstack'][0]].appliance_deletion_epoch }}"
